# -*- coding: utf-8 -*-
"""KartikGB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W9A9orM7z5NViNJSvk4zJccFYOXYMuOq
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer
import joblib

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Load dataset
file_path = '/content/drive/MyDrive/Dataset123.csv'
data = pd.read_csv(file_path)

# Handle missing values
data.fillna(method='ffill', inplace=True)
data.fillna(method='bfill', inplace=True)

# Define features and target
features = ['cf1', 'RH']
if 'TempC' in data.columns:
    features.append('TempC')

target = 'FM'
X = data[features]
y = data[target]

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train GB Regressor
gbm = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
gbm.fit(X_train, y_train)

# Save the model for website
model_path = '/content/drive/MyDrive/GB_model_for_website.joblib'
joblib.dump(gbm, model_path)
print(f"Model saved to: {model_path}")

# Make predictions
y_pred = gbm.predict(X_test)

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
print(f'RÂ² Score: {r2}')

# Extract cf1 values for histogram
original_cf1_test = X_test['cf1']

# Combine results
results_df = pd.DataFrame({
    'Original FM': y_test.values,
    'Predicted FM': y_pred,
    'Original cf1': original_cf1_test.values
})

# Plot histogram
plt.figure(figsize=(14, 8), dpi=600)
plt.hist(results_df['Original FM'], bins=30, alpha=0.5, label='Original FM', color='#00008B')
plt.hist(results_df['Predicted FM'], bins=30, alpha=0.5, label='Calibrated FM', color='#8B0000')
plt.hist(results_df['Original cf1'], bins=30, alpha=0.5, label='Original PA', color='#006400')
plt.xlabel('PM$_{2.5}$', fontsize=24)
plt.ylabel('Frequency', fontsize=24)
plt.title('Histogram of Original FM, Calibrated FM, and Original PA Values for GB', fontsize=24)
plt.legend(fontsize=20)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.tight_layout()

# Save histogram
output_path = '/content/drive/MyDrive/Histogram_GBNew.png'
plt.savefig(output_path, format='png', dpi=600)
print(f"Histogram saved to: {output_path}")

plt.show()