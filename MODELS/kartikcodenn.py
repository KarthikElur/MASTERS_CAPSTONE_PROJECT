# -*- coding: utf-8 -*-
"""KartikCODENN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bhrF8junmsM3kprbirfyhDXQgKCP0sOh
"""

#KartikCodeMLNN
import pandas as pd
import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')
file_path = '/content/drive/MyDrive/Dataset123.csv'
data = pd.read_csv(file_path)

# Handle missing values
data.fillna(method='ffill', inplace=True)
data.fillna(method='bfill', inplace=True)

# Set features based on availability of 'temp'
available_features = ['cf1', 'RH']
if 'TempC' in data.columns:
    available_features.append('TempC')

# Define target
target = 'FM'

# Feature matrix and target
X = data[available_features].values
y = data[target].values

# Train-test split with indices retained
X_train, X_test, y_train, y_test, train_idx, test_idx = train_test_split(X, y, data.index, test_size=0.2, random_state=42)

# Define updated DNN model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential([
    Dense(64, input_dim=X_train.shape[1], activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(1, activation='linear')
])

# Compile model
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1, validation_split=0.2)

# Save model for website deployment
model.save('/content/drive/MyDrive/NN_model_for_website.h5')
print("Model saved to: /content/drive/MyDrive/NN_model_for_website.h5")

# Predict
y_pred = model.predict(X_test).flatten()

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
print(f'R² Score: {r2}')

# Extract cf1 values using test indices
original_cf1_test = data.loc[test_idx, 'cf1']

# Create result DataFrame
results_df = pd.DataFrame({
    'Original FM': y_test,
    'Predicted FM': y_pred,
    'Original cf1': original_cf1_test.values
})

# Save predictions
results_df.to_csv('/content/drive/MyDrive/Visualization_Results_NN.csv', index=False)
print("Results saved to: /content/drive/MyDrive/Visualization_Results_NN.csv")

# Plot
plt.figure(figsize=(14, 8), dpi=600)
plt.hist(results_df['Original FM'], bins=30, alpha=0.5, label='Original FM', color='#00008B')
plt.hist(results_df['Predicted FM'], bins=30, alpha=0.5, label='Calibrated FM', color='#8B0000')
plt.hist(results_df['Original cf1'], bins=30, alpha=0.5, label='Original PA', color='#006400')
plt.xlabel('PM$_{2.5}$', fontsize=24)
plt.ylabel('Frequency', fontsize=24)
plt.title('Histogram of Original FM, Calibrated FM, and Original PA Values for NN', fontsize=24)
plt.legend(fontsize=20)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.tight_layout()
plt.savefig('/content/drive/MyDrive/Histogram_NNNew.png', format='png', dpi=600)
print("Histogram saved to: /content/drive/MyDrive/Histogram_NNNew.png")
plt.show()

import pandas as pd
import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')
file_path = '/content/drive/MyDrive/Dataset123.csv'
data = pd.read_csv(file_path)

# Handle missing values
data.fillna(method='ffill', inplace=True)
data.fillna(method='bfill', inplace=True)

# Set features based on availability of 'temp'
available_features = ['cf1', 'RH']
if 'TempC' in data.columns:
    available_features.append('TempC')

# Define target
target = 'FM'

# Feature matrix and target
X = data[available_features].values
y = data[target].values

# Train-test split with indices retained
X_train, X_test, y_train, y_test, train_idx, test_idx = train_test_split(X, y, data.index, test_size=0.2, random_state=42)

# Define updated DNN model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Define the model
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),  # Input layer with ReLU activation
    Dense(128, activation='relu'),  # Hidden layer
    Dense(1)  # Output layer: No activation function for regression
])

# Compile model
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1, validation_split=0.2)

# Save model for website deployment
model.save('/content/drive/MyDrive/NN_model_for_website.h5')
print("Model saved to: /content/drive/MyDrive/NN_model_for_website.h5")

# Predict
y_pred = model.predict(X_test).flatten()

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
print(f'R² Score: {r2}')

# Extract cf1 values using test indices
original_cf1_test = data.loc[test_idx, 'cf1']

# Create result DataFrame
results_df = pd.DataFrame({
    'Original FM': y_test,
    'Predicted FM': y_pred,
    'Original cf1': original_cf1_test.values
})

# Save predictions
results_df.to_csv('/content/drive/MyDrive/Visualization_Results_NN.csv', index=False)
print("Results saved to: /content/drive/MyDrive/Visualization_Results_NN.csv")

# Plot
plt.figure(figsize=(14, 8), dpi=600)
plt.hist(results_df['Original FM'], bins=30, alpha=0.5, label='Original FM', color='#00008B')
plt.hist(results_df['Predicted FM'], bins=30, alpha=0.5, label='Calibrated FM', color='#8B0000')
plt.hist(results_df['Original cf1'], bins=30, alpha=0.5, label='Original PA', color='#006400')
plt.xlabel('PM$_{2.5}$', fontsize=24)
plt.ylabel('Frequency', fontsize=24)
plt.title('Histogram of Original FM, Calibrated FM, and Original PA Values for NN', fontsize=24)
plt.legend(fontsize=20)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.tight_layout()
plt.savefig('/content/drive/MyDrive/Histogram_NNNew.png', format='png', dpi=600)
print("Histogram saved to: /content/drive/MyDrive/Histogram_NNNew.png")
plt.show()